<div>
  <p>Classes are tool to quickly produce similar objects. Classes are like "templates" used to create objects.</p>
  <p>For example if you have this object:</p>
  <PrismCode code={code.class} language={language} />
  <p>You can create this class to build the same type of objects:</p>
  <PrismCode code={code.class2} language={language} />
  <p>And then you can create new objects thanks to the class. It is called <b>"create an instance"</b>. Like that:</p>
  <PrismCode code={code.classInstance} language={language} />
  <p>Details of how to build a class:</p>
  <ul>
    <li>By convention class names are capitalize and CamelCase</li>
    <li>You need a <b>constructor method</b>. You will invoke it every time you create a new instance of the class</li>
    <li>Inside the <samp>constructor()</samp> method you use the <samp>this</samp> kw (to refers to an instance of this class)</li>
    <li>You can't include comas between your different methods (only synthax difference with an object)</li>
    <li>You need to use the <samp>new</samp> kw to create an instance of a class</li>
  </ul>
  <p><b>Inheritance:</b> when you have several similar classes you can create a "parent" class that will share the same properties and methods that its children classes. The children classes will have the same properties and methods but you can also add new ones.</p>
  <p>So if we take our last example (dog creation). We can actually create a parent <samp>Animal</samp> class, like that:</p>
  <PrismCode code={code.inheritance} language={language} />
  <p>And after that create a child <samp>Cat</samp> class, that will have the same <samp>name</samp> and <samp>behavior</samp> properties, but also a new one called <samp>usesLitter</samp> :</p>
  <PrismCode code={code.inheritance2} language={language} />
  <p>So to create a child class you need:</p>
  <ul>
    <li>The <samp>extend</samp> kw. That makes the parent class available inside the child class</li>
    <li>The <samp>super</samp> kw. That calls the constructor of the parent class. You need it for the property that have an argument (To be able to pass this argument to the child class). Otherwise you don't need to even define the property, each child class automatically have the properties (and methods) of its parents. You <b>always</b> have to call the <samp>super</samp> properties before the ones specific to the child class. (Always use the <samp>super</samp> kw before the <samp>this</samp> kw)</li>
  </ul>
  <p><b>Tips:</b> if you have several properties with arguments that need to be called in the parent class by the <samp>super</samp> KW, you all put it in the SAME super kw (not several ones). Like that:</p>
  <PrismCode code={code.inheritanceSuperKw} language={language} />
  <p><b>Static Methods:</b> Sometimes you will want a class to have methods that aren't available in individual instances, but that you can call directly from the class. (They are similar to class methods in Ruby)</p>
  <p>To create a static method you need to use the static kw like that:</p>
  <PrismCode code={code.staticMethod} language={language} />
  <p>We create a static method that return a random name when called. Because of the <samp>static</samp> kw we can only access this method by appending it to the <samp>Animal</samp> class.</p>
  <p>So you can call the <samp>generateName</samp> method like that : <samp>Animal.generateName()</samp></p>
  <p>But if you create instances of <samp>Animal</samp> (or child classes), for example : const tyson = new Animal('Tyson');</p>
  <p>Then you can't do that : <samp>tyson.generateName()</samp> >> It will return TypeError</p>
</div>
